#!/usr/bin/env bash

# Colors for terminal output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

JS_DIR="$HOME/.local/share/image_downloader"
JS_SCRIPT="$JS_DIR/image_downloader.js"
SCRIPT_VERSION="1.9" # Version tracking - fixed p-queue implementation

# Function to prompt for confirmation
confirm() {
  read -p "$1 [y/N] " response
  case "$response" in
  [yY][eE][sS] | [yY])
    return 0
    ;;
  *)
    return 1
    ;;
  esac
}

# Check if directory exists, create if needed
if [ ! -d "$JS_DIR" ]; then
  echo -e "${YELLOW}Image downloader directory not found.${NC}"
  if confirm "Create directory $JS_DIR?"; then
    mkdir -p "$JS_DIR"
    echo -e "${GREEN}✓ Directory created${NC}"
  else
    echo -e "${RED}Setup cancelled.${NC}"
    exit 1
  fi
fi

# Check if npm is initialized in the directory
if [ ! -f "$JS_DIR/package.json" ]; then
  echo -e "${YELLOW}npm project not found in $JS_DIR.${NC}"
  if confirm "Initialize npm project?"; then
    (cd "$JS_DIR" && npm init -y >/dev/null 2>&1)
    echo -e "${GREEN}✓ npm project initialized${NC}"
  else
    echo -e "${RED}Setup cancelled.${NC}"
    exit 1
  fi
fi

# Check if playwright is installed
if [ ! -d "$JS_DIR/node_modules/playwright" ]; then
  echo -e "${YELLOW}Playwright not found in $JS_DIR.${NC}"
  if confirm "Install Playwright? This may take a few minutes."; then
    (cd "$JS_DIR" && npm install playwright node-fetch@2 jimp >/dev/null 2>&1)
    echo -e "${GREEN}✓ Playwright installed${NC}"
  else
    echo -e "${RED}Setup cancelled.${NC}"
    exit 1
  fi
fi

# Check if p-queue is installed for concurrent downloads
if [ ! -d "$JS_DIR/node_modules/p-queue" ]; then
  echo -e "${YELLOW}p-queue not found in $JS_DIR.${NC}"
  if confirm "Install p-queue for concurrent downloads?"; then
    (cd "$JS_DIR" && npm install p-queue@6.6.2 >/dev/null 2>&1)
    echo -e "${GREEN}✓ p-queue installed${NC}"
  else
    echo -e "${YELLOW}Proceeding without concurrent download capability.${NC}"
  fi
fi

# Check if Jimp is installed for image processing
if [ ! -d "$JS_DIR/node_modules/jimp" ]; then
  echo -e "${YELLOW}Jimp image processing library not found.${NC}"
  if confirm "Install Jimp for blur detection?"; then
    (cd "$JS_DIR" && npm install jimp >/dev/null 2>&1)
    echo -e "${GREEN}✓ Jimp installed${NC}"
  else
    echo -e "${YELLOW}Proceeding without blur detection capability.${NC}"
  fi
fi

# Check if Chromium is installed for Playwright
if [ ! -d "$HOME/.cache/ms-playwright/chromium-"* ]; then
  echo -e "${YELLOW}Chromium browser not found for Playwright.${NC}"
  if confirm "Install Chromium for Playwright? This may take a few minutes."; then
    (cd "$JS_DIR" && npx playwright install chromium >/dev/null 2>&1)
    echo -e "${GREEN}✓ Chromium installed${NC}"
  else
    echo -e "${RED}Setup cancelled.${NC}"
    exit 1
  fi
fi

# Check if JS script exists or if current version is outdated
CURRENT_VERSION=""
if [ -f "$JS_SCRIPT" ]; then
  CURRENT_VERSION=$(grep -oP '// Version: \K[0-9]+\.[0-9]+' "$JS_SCRIPT" || echo "0.0")
fi

if [ ! -f "$JS_SCRIPT" ] || [ "$CURRENT_VERSION" != "$SCRIPT_VERSION" ]; then
  echo -e "${YELLOW}Creating/updating JavaScript script (v$SCRIPT_VERSION)...${NC}"
  # Create the JS file
  cat >"$JS_SCRIPT" <<'ENDSCRIPT'
// Version: 1.9
const { chromium } = require('playwright');
const fs = require('fs');
const path = require('path');
const os = require('os');
const fetch = require('node-fetch');

// Try to load optional dependencies
let PQueue, Jimp;
try {
  // Fix for PQueue import - properly handle both default and named exports
  const pQueueModule = require('p-queue');
  PQueue = pQueueModule.default || pQueueModule;
} catch (e) {
  console.log("p-queue not available. Using sequential downloads.");
}

try {
  Jimp = require('jimp');
} catch (e) {
  console.log("Jimp not available. Blur detection disabled.");
}

// Command line argument parsing
const args = process.argv.slice(2);
const usage = `
Usage: image_downloader [search query] [options]

Options:
  --count, -c       Number of images to download (default: 10)
  --headless        Run browser in headless mode (default: true)
  --engine, -e      Search engine to use: bing or google (default: bing)
  --safe            Enable safe search (default: false)
  --skip-blur       Skip blurred images (default: false)
  --blur-threshold  Threshold for blur detection (default: 50, higher = more sensitive)
  --min-size        Minimum image size in KB (default: 0 - no minimum)
  --max-size        Maximum image size in KB (default: 0 - no maximum)
  --concurrency     Number of concurrent downloads (default: 5)
  --timeout         Download timeout in seconds (default: 30)
  --performance     Turn on performance mode (faster but less human-like) (default: true)
  --help, -h        Show this help message

Example:
  image_downloader "arch linux wallpaper" -c 20
  image_downloader "nature" -e google -c 15 --safe true
  image_downloader "cats" --min-size 1000 --max-size 5000 --concurrency 10
`;

// Show help if requested or no query provided
if (args.includes('--help') || args.includes('-h') || args.length === 0) {
  console.log(usage);
  process.exit(0);
}

// Parse arguments
const query = args[0];
let count = 10;
let headless = true;
let searchEngine = 'bing';
let safeSearch = false;
let skipBlur = false;
let blurThreshold = 50;
let minSize = 0;
let maxSize = 0;
let concurrency = 5;
let timeout = 30;
let performance = true;

for (let i = 1; i < args.length; i++) {
  if (args[i] === '--count' || args[i] === '-c') {
    count = parseInt(args[++i]) || 10;
  } else if (args[i] === '--headless') {
    headless = args[i+1] !== 'false';
    i++;
  } else if (args[i] === '--engine' || args[i] === '-e') {
    const engine = args[++i]?.toLowerCase();
    if (engine === 'google' || engine === 'bing') {
      searchEngine = engine;
    } else {
      console.log(`Invalid search engine: ${engine}. Using bing.`);
    }
  } else if (args[i] === '--safe') {
    safeSearch = args[i+1] !== 'false';
    i++;
  } else if (args[i] === '--skip-blur') {
    skipBlur = args[i+1] !== 'false';
    i++;
  } else if (args[i] === '--blur-threshold') {
    blurThreshold = parseInt(args[++i]) || 50;
  } else if (args[i] === '--min-size') {
    minSize = parseInt(args[++i]) || 0;
  } else if (args[i] === '--max-size') {
    maxSize = parseInt(args[++i]) || 0;
  } else if (args[i] === '--concurrency') {
    concurrency = parseInt(args[++i]) || 5;
  } else if (args[i] === '--timeout') {
    timeout = parseInt(args[++i]) || 30;
  } else if (args[i] === '--performance') {
    performance = args[i+1] !== 'false';
    i++;
  }
}

// Get Downloads directory using XDG standard and add image_downloader subdirectory
function getDownloadsDir() {
  const homeDir = os.homedir();
  const userDirsPath = path.join(homeDir, '.config', 'user-dirs.dirs');
  
  let downloadDir;
  try {
    if (fs.existsSync(userDirsPath)) {
      const content = fs.readFileSync(userDirsPath, 'utf8');
      const match = content.match(/XDG_DOWNLOAD_DIR="([^"]+)"/);
      if (match) {
        downloadDir = match[1].replace(/\$HOME/, homeDir);
      }
    }
  } catch (e) {
    // Fall back to default if error
  }

  // Fall back to ~/Downloads if not found
  if (!downloadDir) {
    downloadDir = path.join(homeDir, 'Downloads');
  }
  
  // Create image_downloader directory inside Downloads
  const imgDir = path.join(downloadDir, 'image_downloader');
  if (!fs.existsSync(imgDir)) {
    fs.mkdirSync(imgDir, { recursive: true });
  }
  
  return imgDir;
}

// Collection of user agents
const userAgents = [
  'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36',
  'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15',
  'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36'
];

// Get a random user agent
function getRandomUserAgent() {
  const index = Math.floor(Math.random() * userAgents.length);
  return userAgents[index];
}

// Create output directory
const sanitizedQuery = query.replace(/[^\w\s]/gi, '').replace(/\s+/g, '_');
const date = new Date().toISOString().split('T')[0];
const dirName = `${sanitizedQuery}_${searchEngine}_${date}`;
let outputDir = path.join(getDownloadsDir(), dirName);

// Ensure output directory exists
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir, { recursive: true });
} else {
  // If directory already exists, create numbered version
  let counter = 1;
  let newDirName;
  do {
    newDirName = `${sanitizedQuery}_${searchEngine}_${date}_${counter}`;
    counter++;
  } while (fs.existsSync(path.join(getDownloadsDir(), newDirName)));
  
  const newOutputDir = path.join(getDownloadsDir(), newDirName);
  fs.mkdirSync(newOutputDir);
  console.log(`Directory already exists. Using: ${newDirName}`);
  outputDir = newOutputDir;
}

// Sleep function - only use when necessary in performance mode
function sleep(ms) {
  if (!performance || ms > 1000) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
  return Promise.resolve();
}

// Function to detect if an image is blurred (for safe search filtering)
async function isImageBlurred(buffer) {
  if (!Jimp || !skipBlur) return false; // Skip if Jimp is not available or blur checking disabled
  
  try {
    // Load the image
    const image = await Jimp.read(buffer);
    
    // Get image dimensions
    const width = image.getWidth();
    const height = image.getHeight();
    
    // Fast blur detection using edge contrast sampling
    let edgeScore = 0;
    const samples = 10; // Reduced sample points for performance
    
    for (let i = 0; i < samples; i++) {
      // Get random points
      const x = Math.floor(Math.random() * (width - 10)) + 5;
      const y = Math.floor(Math.random() * (height - 10)) + 5;
      
      // Get surrounding pixels
      const pixel = image.getPixelColor(x, y);
      const pixelRight = image.getPixelColor(x + 3, y);
      const pixelDown = image.getPixelColor(x, y + 3);
      
      // Get RGB components
      const r1 = Jimp.intToRGBA(pixel).r;
      const g1 = Jimp.intToRGBA(pixel).g;
      const b1 = Jimp.intToRGBA(pixel).b;
      
      const r2 = Jimp.intToRGBA(pixelRight).r;
      const g2 = Jimp.intToRGBA(pixelRight).g;
      const b2 = Jimp.intToRGBA(pixelRight).b;
      
      const r3 = Jimp.intToRGBA(pixelDown).r;
      const g3 = Jimp.intToRGBA(pixelDown).g;
      const b3 = Jimp.intToRGBA(pixelDown).b;
      
      // Calculate differences
      const diff1 = Math.abs(r1 - r2) + Math.abs(g1 - g2) + Math.abs(b1 - b2);
      const diff2 = Math.abs(r1 - r3) + Math.abs(g1 - g3) + Math.abs(b1 - b3);
      
      edgeScore += (diff1 + diff2) / 2;
    }
    
    // Normalize edge score (0-100)
    edgeScore = edgeScore / samples;
    
    // Low edge score indicates blur
    return edgeScore < blurThreshold;
  } catch (error) {
    return false; // If we can't analyze, don't skip the image
  }
}

// Optimized download function - combined size check and download into single fetch
async function downloadImage(url, filePath, options = {}) {
  const { minSizeKB = 0, maxSizeKB = 0, skipBlurred = false } = options;
  
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), timeout * 1000);
    
    const response = await fetch(url, {
      headers: {
        'User-Agent': getRandomUserAgent(),
        'Accept': 'image/webp,image/apng,image/*,*/*;q=0.8',
        'Referer': searchEngine === 'google' ? 'https://www.google.com/' : 'https://www.bing.com/'
      },
      redirect: 'follow',
      signal: controller.signal
    });
    
    clearTimeout(timeoutId);
    
    if (!response.ok) {
      throw new Error(`HTTP status code ${response.status}`);
    }
    
    const buffer = await response.buffer();
    const sizeKB = buffer.length / 1024;
    
    // Check size constraints
    if (minSizeKB > 0 && sizeKB < minSizeKB) {
      throw new Error(`Image too small (${Math.round(sizeKB)}KB < ${minSizeKB}KB minimum)`);
    }
    
    if (maxSizeKB > 0 && sizeKB > maxSizeKB) {
      throw new Error(`Image too large (${Math.round(sizeKB)}KB > ${maxSizeKB}KB maximum)`);
    }
    
    // Check for blur if needed
    if (skipBlurred && Jimp) {
      const blurred = await isImageBlurred(buffer);
      if (blurred) {
        throw new Error(`Detected as a blurred safe search image`);
      }
    }
    
    fs.writeFileSync(filePath, buffer);
    return { success: true };
  } catch (error) {
    if (error.name === 'AbortError') {
      return { success: false, error: 'Download timed out' };
    }
    return { success: false, error: error.message };
  }
}

// Optimized page scrolling - fewer random delays
async function scrollPage(page, scrollCount = 3) {
  const scrollDelay = performance ? 300 : 1000;
  
  for (let i = 0; i < scrollCount; i++) {
    await page.evaluate(() => {
      window.scrollBy(0, window.innerHeight * 0.8);
    });
    await sleep(scrollDelay);
  }
}

// Handle Google CAPTCHA detection
async function handleGoogleCaptcha(page) {
  const captchaExists = await page.evaluate(() => {
    return document.body.innerText.includes('unusual traffic') || 
           document.querySelector('form[action*="captcha"]') !== null;
  });
  
  if (captchaExists) {
    console.log("\n⚠️  Google CAPTCHA detected! Waiting for manual intervention...");
    console.log("Please solve the CAPTCHA in the browser window.");
    
    // Wait for navigation after CAPTCHA is solved
    try {
      await page.waitForNavigation({ timeout: 120000 }); // 2 minute timeout for solving
      return true;
    } catch (error) {
      console.log("Timed out waiting for CAPTCHA solution.");
      return false;
    }
  }
  return true;
}

// Function to extract images from search engine results
async function getImageData(page) {
  if (searchEngine === 'google') {
    // Google image extractor
    return await page.evaluate(() => {
      const images = [];
      
      // First try to get images from the new layout
      document.querySelectorAll('.islrc .isv-r').forEach(el => {
        try {
          // Look for metadata in different possible locations
          let metaElement = el.querySelector('a[href*="imgurl="]');
          
          if (!metaElement || !metaElement.href) {
            metaElement = el.querySelector('[jsaction*="mousedown:"]');
          }
          
          if (metaElement) {
            // Extract URL from different possible formats
            let url;
            if (metaElement.href && metaElement.href.includes('imgurl=')) {
              url = new URL(metaElement.href).searchParams.get('imgurl');
            } else if (metaElement.getAttribute('data-url')) {
              url = metaElement.getAttribute('data-url');
            } else {
              // Extract from custom attributes or inline JSON
              const jsAction = metaElement.getAttribute('jsaction') || '';
              if (jsAction.includes('mousedown:')) {
                // Try to find data in parent elements
                const parentWithData = metaElement.closest('[data-lpage]');
                if (parentWithData) {
                  url = parentWithData.getAttribute('data-lpage');
                }
              }
            }
            
            // Find title in nearby elements
            let title = '';
            const possibleTitleEl = el.querySelector('.bytUYc') || 
                                    el.querySelector('.fYyStc') || 
                                    el.querySelector('h3') || 
                                    el.querySelector('.rQBY2d');
            
            if (possibleTitleEl) {
              title = possibleTitleEl.innerText || 'image';
            } else {
              const img = el.querySelector('img');
              if (img && img.alt) {
                title = img.alt;
              } else {
                title = 'google_image';
              }
            }
            
            const imgElement = el.querySelector('img');
            const isBlurred = imgElement && 
                              (imgElement.style.filter?.includes('blur') || 
                               imgElement.className.includes('SafeSearch'));
            
            if (url) {
              images.push({ url, title, isBlurred });
            }
          }
        } catch (e) {
          // Skip problematic elements
        }
      });
      
      // If we didn't find any images with the complex method, try a simpler fallback
      if (images.length === 0) {
        document.querySelectorAll('img[data-src], img[src*="http"]').forEach(img => {
          const url = img.getAttribute('data-src') || img.src;
          if (url && url.startsWith('http') && 
              img.width > 100 && img.height > 100 && 
              !url.includes('gstatic.com') && 
              !url.includes('google.com/images')) {
            const title = img.alt || 'google_image';
            const isBlurred = img.style.filter?.includes('blur') || img.className.includes('SafeSearch');
            images.push({ url, title, isBlurred });
          }
        });
      }
      
      return images;
    });
  } else {
    // Bing image extractor
    return await page.evaluate(() => {
      // Try primary selector first (.iusc)
      let images = Array.from(document.querySelectorAll('.iusc'))
        .map(div => {
          try {
            const metadata = JSON.parse(div.getAttribute('m'));
            
            // Check if this is a blurred image
            const relatedImgElement = div.querySelector('img');
            const parentElement = div.closest('.img_cont');
            
            const isBlurred = (relatedImgElement && relatedImgElement.classList.contains('blurred')) || 
                              (parentElement && parentElement.querySelector('.SafeSearch')) ||
                              (relatedImgElement && relatedImgElement.style.filter?.includes('blur'));
            
            return {
              url: metadata?.murl,
              title: metadata?.t || 'image',
              isBlurred
            };
          } catch (e) {
            return null;
          }
        })
        .filter(data => data && data.url);
      
      // If no images found with primary selector, try alternate selectors
      if (images.length === 0) {
        images = Array.from(document.querySelectorAll('img[class*="mimg"]'))
          .map(img => {
            const isBlurred = img.classList.contains('blurred') || 
                             img.style.filter?.includes('blur') ||
                             img.closest('.SafeSearch') !== null;
            
            return {
              url: img.src,
              title: img.alt || 'image',
              isBlurred
            };
          })
          .filter(data => data && data.url);
      }
      
      return images;
    });
  }
}

// Function to update the progress bar
function updateProgress(current, total, status = '') {
  const barLength = 30;
  const progress = Math.round((current / total) * barLength);
  const bar = '█'.repeat(progress) + '░'.repeat(barLength - progress);
  
  process.stdout.write(`\r[${bar}] ${current}/${total} ${status}`);
  if (current === total) {
    process.stdout.write('\n');
  }
}

// Main function
(async () => {
  try {
    console.log(`🔍 Searching for: "${query}" using ${searchEngine}`);
    console.log(`📁 Output directory: ${outputDir}`);
    console.log(`🖼️  Image count: ${count}`);
    console.log(`🔒 Safe search: ${safeSearch ? 'Enabled' : 'Disabled'}`);
    console.log(`🔍 Skip blurred images: ${skipBlur ? 'Enabled' : 'Disabled'}${!Jimp ? ' (Jimp not installed)' : ''}`);
    console.log(`⚡ Performance mode: ${performance ? 'Enabled' : 'Disabled'}`);
    console.log(`🔄 Concurrent downloads: ${concurrency}`);
    
    if (minSize > 0) {
      console.log(`📏 Minimum image size: ${minSize}KB`);
    }
    if (maxSize > 0) {
      console.log(`📏 Maximum image size: ${maxSize}KB`);
    }
    
    // Launch browser with optimized settings
    const browser = await chromium.launch({ 
      headless,
      args: [
        '--disable-extensions',
        '--disable-component-extensions-with-background-pages',
        '--disable-default-apps',
        '--mute-audio',
        '--no-default-browser-check',
        '--no-first-run',
        '--disable-background-networking',
        '--disable-sync',
        '--disable-translate',
        '--hide-scrollbars',
        '--metrics-recording-only',
        '--mute-audio',
        '--no-first-run',
        '--safebrowsing-disable-auto-update',
        '--user-agent=' + getRandomUserAgent()
      ]
    });
    
    const context = await browser.newContext({
      userAgent: getRandomUserAgent(),
      viewport: { width: 1920, height: 1080 },
      deviceScaleFactor: 1,
      ignoreHTTPSErrors: true,
      javaScriptEnabled: true
    });
    
    // Reduced timeout in performance mode
    context.setDefaultTimeout(performance ? 15000 : 30000);
    
    const page = await context.newPage();
    
    // Set extra headers
    await page.setExtraHTTPHeaders({
      'Accept-Language': 'en-US,en;q=0.9',
      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
      'Accept-Encoding': 'gzip, deflate, br'
    });
    
    // Navigate to search engine
    const encodedQuery = encodeURIComponent(query);
    
    if (searchEngine === 'google') {
      // Google Image Search URL
      const safeSearchParam = safeSearch ? '&safe=active' : '&safe=images';
      const googleUrl = `https://www.google.com/search?q=${encodedQuery}&tbm=isch${safeSearchParam}`;
      
      console.log(`Navigating to Google Image Search...`);
      await page.goto(googleUrl, { waitUntil: performance ? 'domcontentloaded' : 'networkidle' });
      
      // Check for CAPTCHA and wait for user to solve if needed
      const captchaResult = await handleGoogleCaptcha(page);
      if (!captchaResult) {
        throw new Error("Could not proceed due to Google CAPTCHA.");
      }
      
      // Wait for image results with Google-specific selectors
      try {
        await page.waitForSelector('.islrc, .rg_i', { timeout: 15000 });
      } catch (error) {
        console.log("Primary selectors not found, trying alternate approach...");
        try {
          await page.waitForSelector('img[data-src], img[src*="http"]', { timeout: 10000 });
        } catch (secondError) {
          throw new Error("Could not find any image results on Google.");
        }
      }
      
    } else {
      // Bing Image Search URL
      const safeSearchParam = safeSearch ? '&safesearch=strict' : '&safesearch=off';
      await page.goto(`https://www.bing.com/images/search?q=${encodedQuery}${safeSearchParam}`, 
                      { waitUntil: performance ? 'domcontentloaded' : 'networkidle' });
      
      // Wait for image results with fallback options
      try {
        await page.waitForSelector('.iusc', { timeout: 15000 });
      } catch (error) {
        console.log("Primary selector not found, trying alternate approach...");
        try {
          await page.goto(`https://www.bing.com/images/search?q=${encodedQuery}&form=HDRSC2&first=1${safeSearchParam}`);
          await page.waitForSelector('.iusc, img[class*="mimg"]', { timeout: 15000 });
        } catch (secondError) {
          throw new Error("Could not find any image results on Bing.");
        }
      }
    }
    
    // Scroll down to load more images - fewer scrolls in performance mode
    console.log("Loading more images...");
    await scrollPage(page, performance ? 8 : 5);
    
    // Extract image data
    const imageData = await getImageData(page);
    console.log(`🔎 Found ${imageData.length} images`);
    
    if (imageData.length === 0) {
      throw new Error(`No images found. The ${searchEngine} website structure may have changed.`);
    }
    
    // Filter blurred images if needed (based on page-level detection)
    let filteredImageData = imageData;
    if (skipBlur) {
      const blurredCount = imageData.filter(img => img.isBlurred).length;
      if (blurredCount > 0) {
        console.log(`⚠️  Filtered out ${blurredCount} images detected as blurred`);
        filteredImageData = imageData.filter(img => !img.isBlurred);
      }
    }
    
    // Close browser to free resources before downloading
    await browser.close();
    
    // Prepare for downloads
    const limit = Math.min(count, filteredImageData.length);
    console.log(`⬇️  Downloading ${limit} images...`);
    
    // Set up download counters
    let downloaded = 0;
    let failed = 0;
    
    // Create download queue with concurrency limit
    const downloadImages = async () => {
      // Check if we can use p-queue for concurrent downloads
      const useQueue = typeof PQueue === 'function';
      
      if (useQueue) {
        // Use p-queue for better concurrency control
        const queue = new PQueue({ concurrency });
        
        for (let i = 0; i < filteredImageData.length && i < limit; i++) {
          const index = i;
          queue.add(async () => {
            const { url, title } = filteredImageData[index];
            const sanitizedTitle = title.replace(/[^\w\s]/gi, '').replace(/\s+/g, '_').substring(0, 30);
            const extension = path.extname(url) || '.jpg';
            const fileName = path.join(outputDir, `${index + 1}_${sanitizedTitle}${extension}`);
            
            const result = await downloadImage(url, fileName, {
              minSizeKB: minSize,
              maxSizeKB: maxSize,
              skipBlurred: skipBlur
            });
            
            if (result.success) {
              downloaded++;
            } else {
              failed++;
            }
            
            updateProgress(index + 1, limit, `(${downloaded} successful)`);
          });
        }
        
        await queue.onIdle();
      } else {
        // Fallback to simple batching if p-queue is not available
        const batchSize = Math.min(5, concurrency);
        const imageBatches = [];
        
        for (let i = 0; i < filteredImageData.length && i < limit; i += batchSize) {
          imageBatches.push(filteredImageData.slice(i, Math.min(i + batchSize, limit)));
        }
        
        for (const batch of imageBatches) {
          await Promise.all(batch.map(async (imageInfo, idx) => {
            const index = imageBatches.indexOf(batch) * batchSize + idx;
            if (index >= limit) return;
            
            const { url, title } = imageInfo;
            const sanitizedTitle = title.replace(/[^\w\s]/gi, '').replace(/\s+/g, '_').substring(0, 30);
            const extension = path.extname(url) || '.jpg';
            const fileName = path.join(outputDir, `${index + 1}_${sanitizedTitle}${extension}`);
            
            const result = await downloadImage(url, fileName, {
              minSizeKB: minSize,
              maxSizeKB: maxSize,
              skipBlurred: skipBlur
            });
            
            if (result.success) {
              downloaded++;
            } else {
              failed++;
            }
            
            updateProgress(index + 1, limit, `(${downloaded} successful)`);
          }));
        }
      }
    };
    
    // Start downloads with progress tracking
    const startTime = Date.now();
    await downloadImages();
    const elapsedTime = ((Date.now() - startTime) / 1000).toFixed(1);
    
    console.log(`\n✅ Downloaded ${downloaded}/${limit} images to ${outputDir} in ${elapsedTime}s`);
    if (failed > 0) {
      console.log(`  Failed to download ${failed} images`);
    }
    
    // Force exit to ensure script terminates
    setTimeout(() => {
      process.exit(0);
    }, 500);
    
  } catch (error) {
    console.error(`\n❌ Error: ${error.message}`);
    process.exit(1);
  }
})();
ENDSCRIPT
  chmod +x "$JS_SCRIPT"
  echo -e "${GREEN}✓ JavaScript script created/updated${NC}"
fi

# Execute the JS script with all arguments and ensure it exits properly
node "$JS_SCRIPT" "$@"

# Add a timeout to ensure the process exits even if Node doesn't terminate properly
(
  sleep 120
  # Check if there are any running node processes with our script
  if pgrep -f "$JS_SCRIPT" >/dev/null; then
    echo -e "\n${YELLOW}Script is taking too long, forcing termination...${NC}"
    pkill -f "$JS_SCRIPT"
  fi
) &
timeout_pid=$!

# When this script exits, kill the timeout process if it's still running
trap "kill $timeout_pid 2>/dev/null" EXIT
